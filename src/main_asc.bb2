; Main entry point
;

WBStartup           ; Play nice with Workbench
DEFTYPE .w          ; Set word as the default type

; Set up application constants
;
#screen_width = 320
#screen_height = 200
#screen_depth = 8

; Include all utilities
;
XINCLUDE "utils.bb2"

; Define the states for the game state machine.
; SM is the prefix for state machine related variables and functions
;
#SM_state_none                          ; No state at all
#SM_state_logo = 0                      ; Mass Produced Games logo
#SM_state_title = 1                     ; Game's title screen and menu
#SM_state_game = 2                      ; Gameplay
#SM_state_dead = 3                      ; Game over
#SM_state_quit = 100                    ; Quit the game
SM_current_state = #SM_state_none       ; The game hasn't started, we have no state!
SM_next_state = #SM_state_logo          ; Game starts at the studio logo

; Include all the game modules
;
XINCLUDE "state_logo.bb2"

; Set up the bitmaps for double buffering
;
#DB_primary = 0                         ; Used for bitmaps and queues
#DB_secondary = 1
#DB_buffer_size = 32768                 ; Max number of shapes for the queues
#DB_palette = 0                         ; Palette to use for both bitmaps
BitMap #DB_primary, #screen_width, #screen_height, #screen_depth
BitMap #DB_secondary, #screen_width, #screen_height, #screen_depth
Buffer #DB_primary, #DB_buffer_size
Buffer #DB_secondary, #DB_buffer_size

DB_active = #DB_primary

; Enter BLITZ mode for the rest
BLITZ

; Initialize the display
;
#DB_coplist = 0
#max_sprites = 8                        ; Always 8
coplist_flag.l = $10000                 ; AGA mode
coplist_flag.l +     $8                 ; 8 bitplanes, 256 colors
screen_offset = 70 - (NTSC * 44)        ; centers the display in PAL mode
num_colors = 2 ^ #screen_depth
InitPalette #DB_palette, num_colors
InitCopList #DB_coplist, screen_offset, #screen_height, coplist_flag, #max_sprites, num_colors, 0

CreateDisplay #DB_coplist
DisplayPalette #DB_coplist, #DB_palette

; Define the state initialization statements
; Only define the states that need to do initialization
;
Statement SM_initialize_state{state}
    Select state
        case SM_state_logo
            SM_Logo_Initialize{}

        ; Do nothing
        Default
    End Select
End Statement

; Define the state tick statements
; Only define the states that need to tick
;
Statement SM_tick_state{state}
    Select state
        case SM_state_logo
            SM_Logo_Tick{}

        ; Do nothing
        Default
    End Select
End Statement

; Define the state cleanup statements
; Only define the states that need to do cleanup
;
Statement SM_cleanup_state{state}
    Select state
        case SM_state_logo
            SM_Logo_Cleanup{}

        ; Do nothing
        Default
    End Select
End Statement

; Enter the main loop
Repeat
    VWait

    ; Double-buffer
    ;
    DisplayBitMap #DB_primary, DB_active    ; display the previous frame
    DB_active = 1 - DB_active               ; set the next new active bitmap
    Use BitMap DB_active
    UnBuffer #DB_primary                    ; clear it of any shapes

    ; Check if we are switching to to a new state
    If SM_next_state <> SM_current_state
        ; Call the current_state's cleanup statement
        SM_cleanup_state{SM_current_state}
        SM_current_state = SM_next_state

        ; Call the new state's initialization statement
        SM_initialize_state{SM_next_state}
    EndIf

    ; Tick the current state
    SM_tick_state{SM_current_state}
    
Until SM_current_state = #SM_state_quit

End
