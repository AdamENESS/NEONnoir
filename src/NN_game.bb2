; =============================================================================
; NN_game
; -----------------------------------------------------------------------------
; Contains functions an statement around running the game
; =============================================================================

; Loads a neon pack
;
; Requires AMIGA or QAMIGA mode
; =============================================================================
Function .b NN_load_neonpack{filename$}
  SHARED *NN_locations, *NN_scenes, *NN_regions, *NN_string_table, *NN_string_data
  SHARED NN_location_count, NN_scene_count, NN_region_count, NN_string_count, NN_string_data_size
  SHARED *NS_script_data, NS_script_data_size

  !DB_trace{"NN_GAME", "NN_load_neonpack: " +  filename$}

  If Exists(filename$) = 0 Then Function Return #NN_NEON_file_not_found

  DEFTYPE .w id
  id = 0
  If ReadFile(id, filename$) = 0 Then Function Return #NN_NEON_generic_read_error

  FileInput id

  ; Read the header
  DEFTYPE .l magic
  ReadMem id, &magic, 4
  If magic <> #NN_NEON_magic Then Function Return #NN_NEON_not_a_neon_file

  ; Read the version -- Support only v1.0
  DEFTYPE .l version
  ReadMem id, &version, 4
  If version <> $00010000 Then Function Return #NN_NEON_version_not_supported

  ; Read in all the locations
  DEFTYPE .l size
  ReadMem id, &NN_location_count, 4
  size = NN_location_count * SizeOf .NN_location
  *NN_locations = AllocMem_(size, $10000)  ; Best available memory and clear
  ReadMem id, *NN_locations, size
  !DB_log_str{"NN_GAME", "    Locations > Addr: $" + Hex$(*NN_locations) + " Size: " + Str$(size)}

  ; Read in all the scenes
  ReadMem id, &NN_scene_count, 4
  size = NN_scene_count * SizeOf .NN_scene
  *NN_scenes = AllocMem_(size, $10000)  ; Best available memory and clear
  ReadMem id, *NN_scenes, size
  !DB_log_str{"NN_GAME", "    Scenes    > Addr: $" + Hex$(*NN_scenes) + " Size: " + Str$(size)}

  ; Read in all the regions
  ReadMem id, &NN_region_count, 4
  size = NN_region_count * SizeOf .NN_region
  *NN_regions = AllocMem_(size, $10000)  ; Best available memory and clear
  ReadMem id, *NN_regions, size
  !DB_log_str{"NN_GAME", "    Regions   > Addr: $" + Hex$(*NN_regions) + " Size: " + Str$(size)}

  ; Read all the strings and generate a string table
  ReadMem id, &NN_string_count, 4
  ReadMem id, &NN_string_data_size, 4
  *NN_string_table = AllocMem_(NN_string_count * SizeOf .l, $10000)
  *NN_string_data = AllocMem_(NN_string_data_size, $10000)
  !DB_log_str{"NN_GAME", "    Str Table > Addr: $" + Hex$(*NN_string_table) + " Size: " + Str$(NN_string_count * SizeOf .l)}
  !DB_log_str{"NN_GAME", "    Str Data  > Addr: $" + Hex$(*NN_string_data) + " Size: " + Str$(NN_string_data_size)}

  DEFTYPE .l ptr
  ptr = *NN_string_data
  DEFTYPE .l string_size
  For i = 0 To NN_string_count - 1
    Poke.l *NN_string_table + (i * 4), ptr

    ReadMem id, &string_size, 4
    Poke.l ptr, string_size

    ptr + 4
    ReadMem id, ptr, string_size

    ptr + string_size
  Next

  ; Read all the bytecode... I suppose it's more like word-code
  ReadMem id, &NS_script_data_size, 4
  NS_script_data_size * SizeOf .w
  *NS_script_data = AllocMem_(NS_script_data_size, $10000)
  ReadMem id, *NS_script_data, NS_script_data_size
  !DB_log_str{"NN_GAME", "    Script    > Addr: $" + Hex$(*NS_script_data) + " Size: " + Str$(NS_script_data_size)}

  Function Return #NN_NEON_success
End Function

; Frees up all allocated memory
; =============================================================================
Statement NN_uninitialize{}
  !DB_trace{"NN_GAME", "NN_uninitialize"}
  SHARED *NN_locations, *NN_scenes, *NN_regions, *NN_string_table, *NN_string_data
  SHARED NN_location_count, NN_scene_count, NN_region_count, NN_string_count, NN_string_data_size
  SHARED *NS_script_data, NS_script_data_size

  FreeMem_ *NN_locations, SizeOf .NN_location * NN_location_count
  !DB_log_str{"NN_GAME", "    FreeMem locations $" + Hex$(*NN_locations) + ", " + Str$(SizeOf .NN_location * NN_location_count)}

  FreeMem_ *NN_scenes, SizeOf .NN_scene * NN_scene_count
  !DB_log_str{"NN_GAME", "    FreeMem scenes    $" + Hex$(*NN_scenes) + ", " + Str$(SizeOf .NN_scene * NN_scene_count)}

  FreeMem_ *NN_regions, SizeOf .NN_region * NN_region_count
  !DB_log_str{"NN_GAME", "    FreeMem regions   $" + Hex$(*NN_regions) + ", " + Str$(SizeOf .NN_region * NN_region_count)}

  FreeMem_ *NN_string_table, SizeOf .l * NN_string_count
  !DB_log_str{"NN_GAME", "    FreeMem str table $" + Hex$(*NN_string_table) + ", " + Str$(SizeOf .l * NN_string_count)}

  FreeMem_ *NN_string_data, NN_string_data_size
  !DB_log_str{"NN_GAME", "    FreeMem str data  $" + Hex$(*NN_string_data) + ", " + Str$(NN_string_data_size)}

  FreeMem_ *NS_script_data, NS_script_data_size
  !DB_log_str{"NN_GAME", "    FreeMem str data  $" + Hex$(*NS_script_data) + ", " + Str$(NS_script_data_size)}
End Statement

; Loads the mouse pointers
;
; Requires AMIGA or QAMIGA mode
; =============================================================================
Statement NN_load_pointers{filename$}
  !DB_trace{"NN_GAME", "NN_load_pointers"}
  LoadShapes #NN_pointer_start, #NN_pointer_end, filename$

  SpriteMode 0
  For i = #NN_pointer_start To #NN_pointer_end
    GetaSprite i - #NN_pointer_start, i
    Free Shape i
  Next
End Statement

; Initializes the game resources
; neonpack$: Game's .NEON file, relative to the data/ directory
; pointers$: Game's mouse cursors, relative to the data/ directory
; =============================================================================
Function NN_initialize{neonpack$, pointers$}
  !DB_trace{"NN_GAME", "NEONpack: " + neonpack$ + " Mouse Pointers: " + pointers$}
  NN_load_pointers{"data/" + pointers$}

  Function Return NN_load_neonpack{"data/" + neonpack$}
End Function

; Loads the bitmaps for the new location and set the current
; scene to the selected one.
;
; Requires AMIGA or QAMIGA mode
; =============================================================================
Statement NN_load_location{new_loc_id.w, new_scene_id.w}
  !DB_trace{"NN_GAME", "NN_load_location{" + Str$(new_loc_id) + ", " + Str$(new_scene_id) + "}"}
  SHARED *NN_current_location, *NN_current_scene
  SHARED *NN_locations, *NN_scenes, *NN_string_table, *NN_string_data
  *NN_current_location = !__get_location{new_loc_id}

  ; Load all the backgrounds
  For bg = 0 To *NN_current_location\last_bg - *NN_current_location\first_bg
    BitMap bg, #NN_screen_width, #NN_screen_height, #NN_screen_bpp
    bmp$ = !__get_string{bg + *NN_current_location\first_bg}
    NPrint bmp$
    LoadBitMap bg, "data/" + bmp$, bg
  Next

  ; Setup the next scene
  *NN_current_scene = !__get_scene{*NN_current_location\first_scene + new_scene_id}
End Statement


; Checks if a point is inside one of the regions
; =============================================================================
Function.w NN_get_overlapped_region{mx.w, my.w}
  ;!DB_trace{"NN_GAME", "NN_get_overlapped_region"}
  SHARED *NN_regions, *NN_current_scene
  DEFTYPE .NN_region *region

  For r = *NN_current_scene\first_region To *NN_current_scene\last_region
    *region = !__get_region{r}
    x1.w = *region\x1
    x2.w = *region\x2
    y1.w = *region\y1
    y2.w = *region\y2

    If mx >= x1 AND mx < x2 AND my >= y1 AND my < y2
      Function Return r
    End If
  Next

  Function Return -1
End Function

; Sets the currently selected scene
; =============================================================================
Statement NN_game_set_scene{id.w}
  SHARED *NN_scenes, *NN_current_scene, NN_current_bmp
  !DB_trace{"NN_GAME", "NN_game_set_scene: " + Str$(id)}

  FadeOutScreen{ #DB_coplist, NN_current_bmp, 10}
  *NN_current_scene = !__get_scene{id}
  ;NN_current_bmp = *NN_current_scene\background_id

  ;FadeInScreen{ #DB_coplist, NN_current_bmp, 10}

End Statement

Statement NN_game_map{}
  !DB_trace{"NN_GAME", "NN_game_map"}
  NPrint "Displaying location map"
End Statement

Statement NN_game_over{id.w}
  !DB_trace{"NN_GAME", "NN_game_over"}
End Statement
