WBStartup
DEFTYPE .w

#DB_ENABLE_DEBUG_LOG = -1
#DB_ENABLE_DEBUG_TRACE = -1

XINCLUDE "NN_game.bb2"
XINCLUDE "TX_core.bb2"
XINCLUDE "NS_script.bb2"

AMIGA

#DB_coplist = 0
#max_sprites = 8                        ; Always 8
coplist_flag.l = $10000                 ; AGA mode
coplist_flag.l +     $8                 ; 8 bitplanes, 256 colors
screen_offset = 70 - (NTSC * 44)        ; centers the display in PAL mode
InitCopList #DB_coplist, screen_offset, #NN_screen_height, coplist_flag, #max_sprites, #NN_screen_colors, 0

DEFTYPE .b result
result = NN_initialize{"gutter.neon", "pointers.shape"}
If result <> #NN_NEON_success
  NPrint "Error: ", result
  Goto Finish
End If

TX_initialize{"display.font", "frame.shape"}

NN_load_location{0, 0}

BLITZ

Mouse On
CreateDisplay #DB_coplist

#BF_main = 0
#BF_text = 1
Buffer #BF_main, 64000
Buffer #BF_text, 4096

DEFTYPE .w pointer_id, bg_id
DEFTYPE .w overlapped, prev_overlap
DEFTYPE .NN_region *region
DEFTYPE .b done

bg_id = 0
pointer_id = 0
overlapped = -1
prev_overlap = -1
done = False

Repeat
  VWait

  bg_id = *NN_current_scene\background_id

  ; Show the background image
  DisplayPalette #DB_coplist, bg_id
  DisplayBitMap #DB_coplist, bg_id

  ; Update the mouse pointer
  DisplaySprite #DB_coplist, pointer_id, MouseX, MouseY, 0

  overlapped = NN_get_overlapped_region{MouseX, MouseY}

  ; Show or hide hover text for the overlapped region
  If overlapped <> prev_overlap
    UnBuffer #BF_main
    If overlapped <> -1
      *region = !__get_region{overlapped}
      TX_draw_text_wrapped{!__get_string{*region\description_id}, 32, 160, 200}
      pointer_id = *region\pointer_id

      If Joyb(0) = 1 AND *region\script_offset <> -1
        NS_execute_script{*region\script_offset}
      End If
    Else
      pointer_id = 0
    End If
  End If

  prev_overlap = overlapped

  ; Press ESC to quit
  If RawStatus($45) Then done = True

Until done

Finish:
TX_uninitialize{}
NN_uninitialize{}

End
; * Cannot use string literals as parameters
; * String variables must be prefixed with &
;   printf{"hello $s", &there$}
Macro printf
  CNIF `0 > 1
    Poke.l $BFFF00, (`2)
  CEND

  CNIF `0 > 2
    Poke.l $BFFF00, (`3)
  CEND

  CNIF `0 > 3
    Poke.l $BFFF00, (`4)
  CEND

  CNIF `0 > 4
    Poke.l $BFFF00, (`5)
  CEND

  CNIF `0 > 5
    Poke.l $BFFF00, (`6)
  CEND

  printf_fmt$ = (`1) + Chr$(10)
  Poke.l $BFFF04, &printf_fmt$
End Macro
